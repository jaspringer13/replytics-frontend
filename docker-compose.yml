# Development Docker Compose Configuration
# /Users/jakespringer/Desktop/Replytics Website/docker-compose.yml
version: '3.8'

services:
  # Frontend Next.js Application
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: http://backend:8000
      DATABASE_URL: postgresql://replytics:password@postgres:5432/replytics
      REDIS_URL: redis://redis:6379
      NEXTAUTH_URL: http://localhost:3000
      NEXTAUTH_SECRET: dev-secret-key-change-in-production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./.next:/app/.next
    networks:
      - replytics-network
    restart: unless-stopped
    mem_limit: 1g
    cpus: 0.5
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Voice-Bot Backend Service
  backend:
    build:
      context: ../voice-bot
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
      - "8080:8080"  # Metrics port
    environment:
      DATABASE_URL: postgresql://replytics:password@postgres:5432/replytics
      REDIS_URL: redis://redis:6379
      DUCKLING_URL: http://duckling:8000
      LOG_LEVEL: info
      PYTHONPATH: /code
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      duckling:
        condition: service_healthy
    volumes:
      - ./voice-bot-logs:/code/logs
      - ./voice-bot-data:/code/data
    networks:
      - replytics-network
    restart: unless-stopped
    mem_limit: 2g
    cpus: 1.0
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Duckling Service for NLP
  duckling:
    image: rasa/duckling:latest
    ports:
      - "8888:8000"
    networks:
      - replytics-network
    restart: unless-stopped
    mem_limit: 512m
    cpus: 0.5
    healthcheck:
      test: ["CMD", "curl", "-f", "-X", "POST", "http://localhost:8000/parse", "--data", "locale=en_US&text=test"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: replytics
      POSTGRES_USER: replytics
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - replytics-network
    restart: unless-stopped
    mem_limit: 1g
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U replytics -d replytics"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - replytics-network
    restart: unless-stopped
    mem_limit: 512m
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - replytics-network
    restart: unless-stopped
    mem_limit: 256m

  # Monitoring Services
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - replytics-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: "false"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - replytics-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  replytics-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16