# Production Docker Compose Configuration
# /Users/jakespringer/Desktop/Replytics Website/docker-compose.production.yml
version: '3.8'

services:
  # Frontend Next.js Application - Production
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      NEXTAUTH_URL: ${NEXTAUTH_URL}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      SENTRY_DSN: ${SENTRY_DSN}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    env_file:
      - .env.production
    depends_on:
      backend:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs:rw
    networks:
      - replytics-production
    restart: always
    mem_limit: 2g
    cpus: 1.0
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  # Voice-Bot Backend Service - Production
  backend:
    build:
      context: ../voice-bot
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
      - "8080:8080"  # Metrics port
    environment:
      DATABASE_URL: ${VOICE_BOT_DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      DUCKLING_URL: http://duckling:8000
      LOG_LEVEL: ${LOG_LEVEL:-info}
      SENTRY_DSN: ${SENTRY_DSN}
      PYTHONPATH: /code
    env_file:
      - .env.production
    depends_on:
      duckling:
        condition: service_healthy
    volumes:
      - ./voice-bot-logs:/code/logs:rw
    networks:
      - replytics-production
    restart: always
    mem_limit: 4g
    cpus: 2.0
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
      restart_policy:
        condition: on-failure
        delay: 15s
        max_attempts: 3
        window: 180s
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "10"

  # Duckling Service - Production
  duckling:
    image: rasa/duckling:latest
    ports:
      - "8888:8000"
    networks:
      - replytics-production
    restart: always
    mem_limit: 1g
    cpus: 1.0
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "-X", "POST", "http://localhost:8000/parse", "--data", "locale=en_US&text=test"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s
    logging:
      driver: "json-file"
      options:
        max-size: "25m"
        max-file: "3"

  # Nginx Load Balancer - Production
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.production.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl:ro
      - /var/log/nginx:/var/log/nginx:rw
    depends_on:
      - frontend
      - backend
    networks:
      - replytics-production
    restart: always
    mem_limit: 512m
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3

  # External Redis (Production assumes managed Redis service)
  # Uncomment if using self-hosted Redis
  # redis:
  #   image: redis:7-alpine
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - redis_data:/data
  #     - ./config/redis.production.conf:/usr/local/etc/redis/redis.conf:ro
  #   command: redis-server /usr/local/etc/redis/redis.conf
  #   networks:
  #     - replytics-production
  #   restart: always
  #   mem_limit: 2g
  #   deploy:
  #     replicas: 1
  #     resources:
  #       limits:
  #         memory: 2G
  #         cpus: '1.0'

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.production.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - replytics-production
    restart: always
    mem_limit: 2g
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_SMTP_ENABLED: "true"
      GF_SMTP_HOST: ${SMTP_HOST}
      GF_SMTP_USER: ${SMTP_USER}
      GF_SMTP_PASSWORD: ${SMTP_PASSWORD}
      GF_SMTP_FROM_ADDRESS: ${SMTP_FROM_ADDRESS}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - ./config/grafana/alerting:/etc/grafana/provisioning/alerting:ro
    depends_on:
      - prometheus
    networks:
      - replytics-production
    restart: always
    mem_limit: 1g
    logging:
      driver: "json-file"
      options:
        max-size: "25m"
        max-file: "3"

volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  # redis_data:  # Uncomment if using self-hosted Redis
  #   driver: local

networks:
  replytics-production:
    driver: overlay
    encrypted: true
    ipam:
      config:
        - subnet: 10.0.1.0/24